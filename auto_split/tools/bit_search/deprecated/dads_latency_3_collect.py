import datetime
from attrdict import AttrDict
import random
import numpy as np
import os, copy
import datetime
from pathlib import Path
import pandas as pd
import argparse


def collect_latency_summary(input_latency_dir_path):
    latency_stats = pd.DataFrame(columns=['name','edge_sec', 'tr_sec', 'cloud_sec', 'split_idx', 'total_sec'])
    for file in os.listdir(input_latency_dir_path):
        filename = os.path.basename(file)
        if filename.endswith(".csv") and (filename.split('_')[0].isnumeric() or
                                          filename.split('_')[0].lstrip('-').isnumeric()):
            result_file_name = os.path.join(input_latency_dir_path, file)
            print(result_file_name)
            f = open(result_file_name, "r")
            lines = f.readlines()
            # print(lines[1])
            tmp_list =  lines[1].strip('\n').split(',')
            tmp_list = [round(float(x),6) for x in tmp_list]
            edge_sec = tmp_list[0]
            transmission_sec = tmp_list[1]
            cloud_sec = tmp_list[2]
            split_idx = int(tmp_list[3])
            total_sec = tmp_list[4]
            name = file.split('.csv')[0]
            latency_stats = latency_stats.append({ 'name': name,
                'edge_sec': edge_sec, 'tr_sec': transmission_sec, 'cloud_sec': cloud_sec,
                'split_idx': split_idx, 'total_sec': total_sec
            }, ignore_index=True)
            f.close()


    # print(latency_stats)
    latency_stats.to_csv(input_latency_dir_path + '/latency_summary.csv', index=False, header=True)
    return latency_stats

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--net-df', '-n',default='resnet18_20200927-130044', type=lambda s: s.lower(),
                        help=' Needs timestamp folder generated by autosplit algorithm ')

    args = parser.parse_args()
    datadir = args.net_df
    input_mse_dir_path = 'generated/dads/' + datadir + '/'
    input_latency_dir_path = 'generated/dads_latency/' + datadir + '/'

    # logging.basicConfig(stream=sys.stderr, level=logging.INFO)
    # logger = logging.getLogger('LATENCY')
    latency_stats_df = collect_latency_summary(input_latency_dir_path)
    mse_stats_df = pd.read_csv(input_mse_dir_path + '/latency_mse_stats.csv')
    # print(mse_stats_df)

    # For each row in latency_df get
    for _, latency_row in latency_stats_df.iterrows():
        name, edge_sec, tr_sec, cloud_sec, split_idx, total_sec = latency_row
        idx = mse_stats_df[mse_stats_df['name'] == name].index

        if idx.empty:
            print('{} not found'.format(name))
            continue
        else:
            idx = idx[0]

        mse_stats_df.at[idx,'edge_sec'] = edge_sec
        mse_stats_df.at[idx,'tr_sec'] = tr_sec
        mse_stats_df.at[idx,'cloud_sec'] = cloud_sec
        mse_stats_df.at[idx,'latency'] = total_sec

    mse_stats_df.to_csv(input_latency_dir_path + '/latency_mse_stats.csv',index=False, header=True)
