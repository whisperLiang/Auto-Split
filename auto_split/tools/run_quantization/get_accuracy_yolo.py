from pathlib import Path
import io
import pandas as pd
from collections import OrderedDict
import shutil, os, sys
import re
import argparse
import numpy as np


def get_accuracy(pattern):
    tmp = pattern.strip('\n').split('  ')
    top1_accuracy = tmp[0].split(':')[-1]
    top5_accuracy = tmp[2].split(':')[-1]
    return float(top1_accuracy), float(top5_accuracy)


def collect_accuracy_stats(input_folder):
    accuracy_df = pd.DataFrame(columns=['name', 'accuracy'])
    basepath = Path(input_folder)
    found_pattern = {}
    for (_, dirnames, _) in os.walk(basepath):
        for subdirs in dirnames:
            for (_, _, file_list) in os.walk(os.path.join(input_folder,subdirs) ):
                config = ''
                map_value = -1
                for file in file_list:
                    if '.log' in file:
                        filepath = os.path.join(input_folder, subdirs,file)
                        for line in open(filepath):
                            pattern = 'Reading configuration from:'
                            if re.search(pattern, line):
                                config = os.path.basename(line.strip('\n')).split('.yaml')[0]
                                break

                    if file == 'map.txt':
                        filepath = os.path.join(input_folder, subdirs, file)
                        for line in open(filepath):
                            # pattern2 = 'IoU=0.50:0.95'
                            pattern2='IoU=0.50:0.95 | area=   all | maxDets=100'
                            if re.search(pattern2, line):
                                map_value = float(line.strip('\n').split('=')[-1].split(' ')[-1])
                                break

                found_pattern[config] = map_value
                accuracy_df = accuracy_df.append({'name': config,
                                                  'accuracy': map_value}, ignore_index=True)

    return accuracy_df


def main():
    parser = argparse.ArgumentParser()
    islatency_available=True
    parser.add_argument('--net-df', '-n', default='resnet50_20200521-174448', type=lambda s: s.lower(),
                        help=' Needs timestamp folder generated by autosplit algorithm ')

    args = parser.parse_args()
    logdir=args.net_df

    root_dir=os.getcwd()
    accuracy_folder= '{}/generated/quant_results/{}'.format(root_dir,logdir)
    accuracy_df = collect_accuracy_stats(accuracy_folder)

    if islatency_available:
        latency_file = '{}/generated/latency/{}/latency_mse_stats.csv'.format(root_dir,logdir)
        latency_mse_df = pd.read_csv(latency_file)
        merge_df = pd.merge(latency_mse_df, accuracy_df, how='inner',on='name')
        merge_df.drop('accuracy_x',axis=1, inplace=True)
        merge_df.rename(columns={'accuracy_y':'accuracy'}, inplace=True)
        # latency_mse_df.update(accuracy_df)
        print(merge_df)
        merge_df.to_csv('{}/generated/quant_results/accuracy_{}.csv'.format(root_dir,logdir))
    else:
        accuracy_df.to_csv('{}/generated/quant_results/only_accuracy_{}.csv'.format(root_dir,logdir))

if __name__ == '__main__':
    main()
