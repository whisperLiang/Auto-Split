import numpy as np
import csv
from matplotlib import pyplot as plt
import yaml, os
from pathlib import Path
import io
import pandas as pd
from collections import OrderedDict
import shutil, os, sys
import subprocess
import argparse
import logging

# def pushd(new_dir):
#     previous_dir = os.getcwd()
#     os.chdir(new_dir)
#     changed_dir = os.getcwd()
#     print('new dir: {} '.format(changed_dir))
#     return previous_dir
#
# def popd(previous_dir):
#     os.chdir(previous_dir)
#     changed_dir = os.getcwd()
#     print('new dir: {} '.format(changed_dir))
#     return

def subprocess_cmd(command, pushd_dir):
    process = subprocess.Popen(command,cwd=pushd_dir,stdout=subprocess.PIPE, shell=True)
    # process = subprocess.Popen(exec_str.split(),cwd=pushd_dir, stdout=subprocess.PIPE,shell=True)
    proc_out, proc_err = process.communicate()
    return proc_out, proc_err

def run_distiller(args):
    input_bits_folder_name = args.net_df
    model_name = args.arch
    device_id = args.deviceid
    python_exec=args.pythonexec
    dataset=args.dataset

    # Set paths
    root_dir = os.getcwd() + '/'
    input_bits_folder= root_dir + 'generated/run_quantization/'+ input_bits_folder_name + '/'
    basepath = Path(input_bits_folder)
    files_in_basepath = basepath.iterdir()
    result_dir= root_dir+'generated/quant_results/'+ input_bits_folder_name
    pushd_dir = result_dir
    Path(pushd_dir).mkdir(parents=True, exist_ok=True)
    logging.basicConfig(filename= result_dir + '/run_distiller.log', level=logging.INFO)
    logger = logging.getLogger('QUANT-RESULTS')
    for filepath in files_in_basepath:

        if not filepath.is_file():
            continue

        # Runs only True_True case but then False_False is gone
        # if 'False_False' in filepath.name:
        #     continue

        if '.yaml' in filepath.name :
            distiller_path=root_dir+'../libs/distiller-master/'
            quant_script = root_dir + '../libs/distiller-master/examples/classifier_compression/compress_classifier.py'

            # Bash commands -- to run
            set_env1='export PYTHONPATH={}'.format(distiller_path)
            set_env2 = 'export CUDA_VISIBLE_DEVICES={}'.format(device_id)
            # set_env2=''
            # More FLAGS:
            # --lapq-eval-memoize-dataloader
            # --lapq-eval-size 0.0028
            # --det
            # --lapq-init-mode LAPLACE
            # --lapq-init-method powell
            exec_str='{} {} -a {} -p 10 -j 4 {} --pretrained --eval ' \
                     '--quantize-eval --qe-lapq  --lapq-maxiter 2 --qe-config-file {} ' \
                     '-b {} ' \
                     '  --lapq-search-clipping'.format(python_exec, quant_script,
                                                                  model_name, dataset, filepath, 128)
            print(set_env1)
            print(set_env2)
            print(exec_str)
            bash_cmd = set_env1 + ';' + set_env2 + ';' + exec_str
            logger.info('STARTED: {}'.format(exec_str))
            try:

                proc_out, proc_error = subprocess_cmd(bash_cmd, pushd_dir)
                # print(proc_error)
            except:
                logger.warning('FAILED: {}'.format(bash_cmd))




if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--net-df', '-n',default='resnet50_20200521-174448', type=lambda s: s.lower(),
                        help=' Needs timestamp folder generated by autosplit algorithm ')
    parser.add_argument('--arch', '-a', metavar='ARCH', default='resnet50', type=lambda s: s.lower(),
                        help='add graph information to model stats dataframe')
    parser.add_argument('dataset', metavar='DATASET_DIR',
                        default='~/datasets/ImageNet2017/ILSVRC/Data/CLS-LOC/',
                        help='path to dataset')
    parser.add_argument('--deviceid', type=int, help='cuda_device_id: 0,1,2,3..')
    parser.add_argument('--pythonexec', metavar='DATASET_DIR',
                        help='complete path to python')

    # python_exec = '~/anaconda3/envs/pyt_13/bin/python'
    # python_exec='python'

    args = parser.parse_args()
    run_distiller(args)

